#include <stream/Serial.h>

#define TABU_LENGTH  7
#define NUM_CYCLES   1000000
#define ITEMS        17

using namespace nre;

auto &s = Serial::get();

typedef struct {
  int pj;
  int dj;
  int wj;
  int id;
} task;

static task* tabu[TABU_LENGTH][2];

static task tasks_initial[ITEMS] = {
                              {12 , 154 , 56 , 15},
                              {12 , 196 , 28 , 11},
                              { 4 ,  73 , 31 ,  7},
                              {14 , 166 , 79 , 10},
                              {20 , 165 , 46 ,  4},
                              {16 ,  92 , 72 , 16},
                              {18 ,   5 , 57 ,  2},
                              {13 ,   6 , 10 ,  3},
                              { 7 , 215 , 43 , 13},
                              { 6 ,  75 , 63 ,  8},
                              {17 , 100 , 50 , 17},
                              { 7 , 238 , 68 ,  6},
                              {15 , 252 , 43 , 12},
                              { 9 , 235 ,  3 ,  1},
                              {10 ,   5 , 67 , 14},
                              {12 ,  69 , 75 ,  5},
                              {17 ,  56 , 62 ,  9}
                            };

void swap(task **tasks, int a) {
  task *tmp;

  tmp = tasks[a];
  tasks[a] = tasks[a+1];
  tasks[a+1] = tmp;
}

int is_in_tabu(task *a, task *b) {
  int i;

  for(i=0;i<TABU_LENGTH;i++)
    if (tabu[i][0]==a && tabu[i][1]==b)
      return 1;
  return 0;
}

void add_to_tabu(task *a, task *b) {
  int i;

  for(i=TABU_LENGTH-1;i>0;i--) {
    tabu[i][0] = tabu[i-1][0];
    tabu[i][1] = tabu[i-1][1];
  }

  tabu[0][0] = a;
  tabu[0][1] = b;
}

int computeFitness(task **tasks) {
  int i, time = 0, fitness = 0;

  for (i=0;i<ITEMS;i++) {
    time += tasks[i]->pj;
    fitness += ((time-tasks[i]->dj>0) ? time-tasks[i]->dj : 0)*tasks[i]->wj;
  }

  return fitness;
}


void initial_printout(task **tasks_ref, int fitness) {
  int i;

  s << "Pocatecni rozvrh, (fitness):\n";
  for (i=0;i<ITEMS;i++) s << tasks_ref[i]->id << ", ";
  s << "(" << fitness << ")\n";

  s << "\nDoby trvani jednotlivych uloh (nazev ulohy: doba trvani):\n";
  for (i=0;i<ITEMS;i++) s << tasks_ref[i]->id << ": " << tasks_ref[i]->pj << "\n";

  s << "\nTerminy dokonceni jednotlivych uloh (nazev ulohy: termin dokonceni):\n";
  for (i=0;i<ITEMS;i++) s << tasks_ref[i]->id << ": " << tasks_ref[i]->dj << "\n";

  s << "\nVahy jednotlivych uloh (nazev ulohy: vaha):\n";
  for (i=0;i<17;i++) s << tasks_ref[i]->id << ": " << tasks_ref[i]->wj << "\n";

  s << "\nIteracni krok: nejlepsi rozvrh, (fitness):\n";
}

void iter_printout(task **tasks_ref, int fitness, int iter) {
  int j;

  s << iter << ": ";
  for (j=0;j<ITEMS;j++) s << tasks_ref[j]->id << ", ";
  s << "(" << fitness << ")\n";
}

void best_printout(task **tasks_best, int fitness) {
  int i;

  s << "\nNejlepsi rozvrh (nazvy uloh, (fitness)):\n";
  for (i = 0; i < ITEMS; i++) s << tasks_best[i]->id << ", ";
  s << "(" << fitness << ")\n";
}

int main(void) {
  int i, fitness;
  task *tasks_ref[ITEMS], *tasks_best[ITEMS];

  for(i=0;i<ITEMS;i++) tasks_ref[i] = &tasks_initial[i];
  fitness = computeFitness(tasks_ref);
  initial_printout(tasks_ref,fitness);

  for(i = 0; i < NUM_CYCLES; i++) {
    int j, fitness2 = 1000000;
    task *perm1 = nullptr, *perm2 = nullptr;
    task *tasks_cpy0[ITEMS];

    for(j = 0; j < ITEMS-1; j++) {
      int k, pom;
      task *tasks_cpy[ITEMS];

      if (is_in_tabu(tasks_ref[j+1],tasks_ref[j]))
        continue;

      for(k=0;k<ITEMS;k++) tasks_cpy[k] = tasks_ref[k];
      swap(tasks_cpy,j);
      pom = computeFitness(tasks_cpy);

      if (pom < fitness2) {
        perm1 = tasks_cpy[j+1];
        perm2 = tasks_cpy[j];
        fitness2 = pom;
        for (k=0;k<ITEMS;k++) tasks_cpy0[k] = tasks_cpy[k];
      }
    }

    for(j=0;j<ITEMS;j++) tasks_ref[j] = tasks_cpy0[j];
    if (fitness2 < fitness) {
      for(j=0;j<ITEMS;j++) tasks_best[j] = tasks_cpy0[j];
      fitness = fitness2;
    }
    add_to_tabu(perm1,perm2);

    iter_printout(tasks_ref,fitness2,i+1);
    //print_tabu();
  }

  best_printout(tasks_best,fitness);

  return 0;
}
